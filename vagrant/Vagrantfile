##  -*-  coding: utf-8; mode: ruby -*-  ##
##  vi: set ft=ruby

load  File.expand_path("DetectOS.rb")  if File.exists?("DetectOS.rb")

printf("ARGV = %s\n", ARGV);

Vagrant.configure("2") do |config|
  config.vm.box = "takahiro-itou/ubuntu-jammy64-docker"
  config.vm.box_download_options = {"ssl-revoke-best-effort" => true}
  config.vm.box_version = "1.1.0"

  # config.trigger.before :destroy do
  #   vm_info = `vboxmanage showvminfo vagrant-ubuntu-docker --machinereadable | grep storagecontrollerportcount0`
  #   printf("vm_info=%s\n", vm_info)
  #   value = Integer(vm_info.split("=")[1].gsub('"','').chomp())
  #   raise Vagrant::Errors::VagrantError.new, "drive attached - cannot be destroyed" if value > 1
  # end

  config.vm.provider "virtualbox" do |v|
    v.name   = "vagrant-ubuntu-docker"
    v.memory = "3072"

    v.gui    = false
    v.customize [
      "modifyvm",           :id,
      "--cableconnected1",  "on",
      "--hwvirtex",         "on",
      "--nestedpaging",     "on",
      "--largepages",       "on",
      "--ioapic",           "on",
      "--pae",              "on",
      "--paravirtprovider", "kvm",
    ]

    config.trigger.after :halt do
      puts 'dettach drive'
      v.customize [
          'storageattach',    :id,
          '--storagectl',     'SCSI',
          '--port',           2,
          '--device',         0,
          '--type',           'hdd',
          '--medium',         'none',
      ]
    end

    #
    # ディスクを追加する
    #
    disk_file = './disk/ubuntu-docker-sdc.vdi'
    unless File.exists?(disk_file)
        v.customize [
            'createmedium',     "disk",
            '--filename',       disk_file,
            '--size',           50 * 1024,
            '--format',         'VDI',
        ]
    end
    if ARGV.include?('destroy')
      disk_file='./disk/empty.vdi'
      unless File.exists?(disk_file)
          v.customize [
              'createmedium',     "disk",
              '--filename',       disk_file,
              '--size',           1,
              '--format',         'VDI',
          ]
      end
      puts 'Dettach before Destory...'
      v.customize [
          'storageattach',    :id,
          '--storagectl',     'SCSI',
          '--port',           2,
          '--device',         0,
          '--type',           'hdd',
          '--medium',         disk_file,
      ]
    else
    v.customize [
        'storageattach',    :id,
        '--storagectl',     'SCSI',
        '--port',           2,
        '--device',         0,
        '--type',           'hdd',
        '--medium',         disk_file,
    ]
    end
  end

  config.vm.boot_timeout = 900

  config.vm.network(:forwarded_port, guest: 22, host: 11222, id: "ssh")
  config.vm.network("private_network", ip: "192.168.33.12")

  config.vm.provision("userfiles1", type: "file",
                      source: "data.tar.xz",
                      destination: "/tmp/")
  config.vm.provision("userfiles2", type: "shell",
                      path: "provision.data.sh",
                      privileged: false)

  config.vm.provision("root", type: "shell",
                      path: "provision.root.sh",
                      privileged: true)
  config.vm.provision("user", type: "shell",
                      path: "provision.user.sh",
                      privileged: false)
  config.vm.provision("hguser", type: "shell",
                      path: "provision.hguser.sh",
                      privileged: false)
  config.vm.synced_folder(".", "/vagrant", disabled: true)

end
